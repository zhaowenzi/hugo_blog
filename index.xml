<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>z2w_mose</title>
    <link>http://blog.zhaoziwen.com.cn/</link>
    <description>Recent content on z2w_mose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Wed, 09 Apr 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.zhaoziwen.com.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://blog.zhaoziwen.com.cn/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>Ubuntu环境挂载新硬盘</title>
      <link>http://blog.zhaoziwen.com.cn/post/newdisk/</link>
      <pubDate>Mon, 06 May 2019 12:37:21 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/newdisk/</guid>
      <description> 1、显示硬盘及所属分区情况。 sudo fdisk -l 2、对硬盘进行分区。 sudo fdisk /dev/sdc 在Command (m for help) 提示符后面输入n，执行 add a new partition 指令给硬盘增加一个新分区
接着在选择 Partition type 时键入 e，指定分区为扩展分区（extended）
出现 Partition number(1-4)时，输入1表示只分一个区
后续按默认值继续
在重新出现 Command (m for help) 提示符后输入p，显示分区表
无误后键入w，保存分区表
重新进行步骤一，正确操作显示如下：
3、硬盘格式化 sudo mkfs -t ext4 /dev/sdc # -t ext4 表示将分区格式化成ext4文件系统类型  4、挂载硬盘分区 显示硬盘挂载情况
df -l 挂载
sudo mount -t ext4 /dev/sdc /devdata 重新查看挂载情况，如图
4、配置硬盘在系统启动自动挂载 在文件/etc/fstab中加入如下配置
/dev/sdc	/devdata	ext4	defaults	0 0</description>
    </item>
    
    <item>
      <title>Permutations I &amp; II</title>
      <link>http://blog.zhaoziwen.com.cn/post/permutations/</link>
      <pubDate>Wed, 24 Apr 2019 00:35:32 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/permutations/</guid>
      <description>[LeetCode] 46. Permutations
Given a collection of distince integers, return all possible permutations
Example:
Input: [1, 2, 3]
Output:
[ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]
[LeetCode] 47. Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations
Example:
Input: [1, 1, 2]
Output:
[
[1,1,2],
[1,2,1],
[2,1,1]
]
 此题使用深度优先搜索DFS来求解，从左到右依次向out加入之前没有加入的元素，直到level等于num的数目大小，将out加入结果。其中，用visited数组来表示该元素是否被使用过。
classSolution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; num) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res; vector&amp;lt;int&amp;gt; out, visited(num.</description>
    </item>
    
    <item>
      <title>Sum of Two Integers</title>
      <link>http://blog.zhaoziwen.com.cn/post/sum_of_two_integers/</link>
      <pubDate>Tue, 23 Apr 2019 23:30:37 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/sum_of_two_integers/</guid>
      <description>[LeetCode] 371. Sum of Two Integers
Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.
Example 1:
Input: a = 1, b = 2
Output: 3
Example 2:
Input: a = -2, b = 3
Output: 1
 在十进制中，对于5+17=22这个结果，我们可以分为三步：
 只做各位相加不进位，此时相加的结果是12 只做进位，5+7中有进位，进位是10 把前面两个结果加起来，结果正好等于22  在二进制中同理，5的二进制是101，17的二进制是10001
 各位相加但不进位，得到的结果是10100 记下进位，此例中只有最后一位相加时产生一个进位，结果是二进制的10 把前两部的结果相加，结果是10110，正好是22  把二进制上的加法用位运算来替代
int getSum(int a, int b) { if(b == 0) { return a; } int num1 = a ^ b; int num2 = (a &amp;amp; b)&amp;amp;(0x7FFFFFFF) &amp;lt;&amp;lt; 1; return getSum(num1, num2); }  注意：0x7FFFFFFF的作用是为了解决当a = -1, b = 1时，left shift操作错误(对于-2147483648)</description>
    </item>
    
    <item>
      <title>Multiply Strings</title>
      <link>http://blog.zhaoziwen.com.cn/post/multiply_strings/</link>
      <pubDate>Mon, 22 Apr 2019 23:32:59 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/multiply_strings/</guid>
      <description>[LeetCode] 43. Multiply Strings
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
Example 1:
Input: num1 = &amp;ldquo;2&amp;rdquo;, num2 = &amp;ldquo;3&amp;rdquo;
Output: &amp;ldquo;6&amp;rdquo;
Example 2:
Input: num1 = &amp;ldquo;123&amp;rdquo;, num2 = &amp;ldquo;456&amp;rdquo;
Output: &amp;ldquo;56088&amp;rdquo;
 这题看似简单，但是就是写不出来…
两数相乘的乘积的长度正好是两个数字的长度之和
classSolution { public: string multiply(string num1, string num2) { string res = &amp;#34;&amp;#34;; int m = num1.size(), n = num2.</description>
    </item>
    
    <item>
      <title>POSIX信号</title>
      <link>http://blog.zhaoziwen.com.cn/post/posix_signal/</link>
      <pubDate>Fri, 19 Apr 2019 00:17:25 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/posix_signal/</guid>
      <description>在服务器子进程终止时，给父进程发送一个SIGCHLD信号。由于父进程未加处理，子进程进入僵死状态。
POSIX信号处理 信号就是告知某个进程发生了某个事件的通知，有时也成为软件中断(interrupt)
信号可以：
 由一个进程发送给另一个进程 由内核发送给某个进程  每一个信号都有一个与之关联的处置(disposition)，也称为行为(action)。我们通过调用sigaction函数来设定一个信号的处置，并有三种选择：
 提供一个函数，在特定信号发生时就被调用。这样的函数被称为信号处理函数，这种行为称为捕获信号。但是有两个信号不同被捕获，即SIGKILL和SIGSTOP。 可以把某个信号的处置设定为SIG_IGN来忽略它。SIGKILL和SIGSTOP这两个信号不能被忽略。 把某个信号的处置设定为SIG_DFL来启用它的默认处置。  signal函数 简历信号处置的POSIX方法就是调用sigaction函数，简单些的方法就是调用signal函数
/* include signal */ #include	&amp;#34;unp.h&amp;#34; Sigfunc * signal(int signo, Sigfunc *func) { struct sigaction	act, oact; act.sa_handler = func; sigemptyset(&amp;amp;act.sa_mask); act.sa_flags = 0; if (signo == SIGALRM) { #ifdef	SA_INTERRUPT 	act.sa_flags |= SA_INTERRUPT;	/* SunOS 4.x */ #endif 	} else { #ifdef	SA_RESTART 	act.sa_flags |= SA_RESTART;	/* SVR4, 44BSD */ #endif 	} if (sigaction(signo, &amp;amp;act, &amp;amp;oact) &amp;lt; 0) return(SIG_ERR); return(oact.</description>
    </item>
    
    <item>
      <title>Lowest Common Ancestor of a Binary Tree</title>
      <link>http://blog.zhaoziwen.com.cn/post/lowest_common_ancestor_of_a_binary_tree/</link>
      <pubDate>Tue, 16 Apr 2019 00:27:43 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/lowest_common_ancestor_of_a_binary_tree/</guid>
      <description>这里有两个题类似，一个是在二叉查找树的条件下，另一个是在普通二叉树条件下
 [LeetCode] 235. Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5]</description>
    </item>
    
    <item>
      <title>基本TCP套接字编程</title>
      <link>http://blog.zhaoziwen.com.cn/post/basic_tcp_socket_code/</link>
      <pubDate>Sat, 13 Apr 2019 19:51:39 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/basic_tcp_socket_code/</guid>
      <description>基础源码(请求日期和时间) 客户端 #include	&amp;#34;unp.h&amp;#34; int main(int argc, char **argv) { int	sockfd, n; char	recvline[MAXLINE + 1]; struct sockaddr_in	servaddr; if (argc != 2) err_quit(&amp;#34;usage: a.out &amp;lt;IPaddress&amp;gt;&amp;#34;); if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) &amp;lt; 0) err_sys(&amp;#34;socket error&amp;#34;); bzero(&amp;amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(13);	/* daytime server */ if (inet_pton(AF_INET, argv[1], &amp;amp;servaddr.sin_addr) &amp;lt;= 0) err_quit(&amp;#34;inet_pton error for %s&amp;#34;, argv[1]); if (connect(sockfd, (SA *) &amp;amp;servaddr, sizeof(servaddr)) &amp;lt; 0) err_sys(&amp;#34;connect error&amp;#34;); while ( (n = read(sockfd, recvline, MAXLINE)) &amp;gt; 0) { recvline[n] = 0;	/* null terminate */ if (fputs(recvline, stdout) == EOF) err_sys(&amp;#34;fputs error&amp;#34;); } if (n &amp;lt; 0) err_sys(&amp;#34;read error&amp;#34;); exit(0); } 服务端 #include	&amp;#34;unp.</description>
    </item>
    
    <item>
      <title>Partition Equal Subset Sum</title>
      <link>http://blog.zhaoziwen.com.cn/post/partition_equal_subset_sum/</link>
      <pubDate>Thu, 04 Apr 2019 01:05:06 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/partition_equal_subset_sum/</guid>
      <description>[LeetCode] 416. Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.
Note:
 Each of the array element will not exceed 100. The array size will not exceed 200.  Example1:
Input: [1, 5, 11, 5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].</description>
    </item>
    
    <item>
      <title>Burst Balloons</title>
      <link>http://blog.zhaoziwen.com.cn/post/burst_balloons/</link>
      <pubDate>Tue, 02 Apr 2019 23:48:10 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/burst_balloons/</guid>
      <description>[LeetCode] 312. Burst Balloons
Given n ballons, indexed from 0 to n-1. Each ballon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst ballon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.
Find the maximum coins you can collect by bursting the balloons wisely.</description>
    </item>
    
    <item>
      <title>传输控制协议TCP概述</title>
      <link>http://blog.zhaoziwen.com.cn/post/tcp/</link>
      <pubDate>Tue, 02 Apr 2019 01:08:31 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/tcp/</guid>
      <description>TCP主要特点  TCP是面向连接的运输层协议。意味着在使用TCP之前，必须要先建立TCP连接；在完成数据传送后，释放已经建立的TCP连接。 每一条TCP连接只能有两个端点(endpoint)，即TCP连接是点对点的。 TCP提供可靠交付的服务。 TCP提供全双工通信。 面向字节流。TCP并不关心应用程序一次把多长的报文发送到TCP的缓存中，而是根据对方给出的窗口值和当前网络拥塞的程度来决定应该包含多少个字节（与UDP不同，由应用程序给出）  TCP的连接 TCP连接的端点叫做套接字(socket)，即由端口号拼接到IP地址后面构成，例如：192.3.4.5:80，每一条TCP连接唯一地被通信两端的两个端点(即两个套接字)所确定
可靠传输的工作原理 停止等待协议 &amp;ldquo;停止等待&amp;rdquo;就是每发送完一个分组就停止发送，等待对方的确认，在收到确认之后再发送下一个分组。
 无差错情况(a)
 出现差错(b)
 A在发送完一个分组后，暂时保留已发送的分组的副本，收到相应确认后消除副本。 分组和确认分组必须进行编号。 超时计时器设置的重传时间应当比数据在分组传输的平均时间更长一些。  确认丢失和确认迟到
 确认丢失  丢弃这个重复的分组，不向上交付。 向A发送确认  确认迟到  A收到重复确认后丢弃。 B收到重复的分组后按确认丢失处理。   上述这种可靠的传输协议常称为自动重传请求ARQ(Automatic Repeat reQuest)
 信道利用率
$$U=\frac{T_{D}}{T_{D} + RTT + T_{A}}$$
为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输，该方式会使用连续ARQ协议和滑动窗口协议。
  连续ARQ协议 发送方每收到一个确认，就把发送窗口向前滑动一个分组。接收方一般是采用累计确认的方式，即接收方不必对收到的分组逐个发送确认，而是在收到几个分组之后，对按序到达的最后一个分组发送确认。
TCP报文段的首部格式 TCP报文段首部的前20个字节是固定的(如下图)，后面有4n字节是根据需要而增加的选项。因此TCP首部的最小长度是20字节。
各字段意义如下：
 源端口和目的端口。
 序号。范围是$[0, 2^{32} - 1]$，在一个TCP连接中传送的字节流中的每一个字节都按序编号。首部中的序号字段值指的是本报文段所发送的数据的第一个字节的序号。
 确认号。是期望收到对方下一个报文段的第一个数据字节的序号。若确认号 = N，则表明：到序号N - 1为止的所有数据都已正确收到。
 数据偏移。指的是TCP报文段的数据起始处距离TCP报文段的起始处有多远。实际上是指TCP报文段的首部长度。&amp;rdquo;数据偏移&amp;rdquo;的单位是32位字(即4字节)。由于4位二进制数能表示的最大十进制数字是15，因此数据偏移最大值是50字节。也是TCP首部的最大长度。
 保留。保留为今后使用，目前应置为0。后跟6个控制位。</description>
    </item>
    
    <item>
      <title>Best Time to Buy and Sell Stock with Cooldown</title>
      <link>http://blog.zhaoziwen.com.cn/post/best_time_to_buy_and_sell_stock_with_cooldown/</link>
      <pubDate>Mon, 01 Apr 2019 22:57:33 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/best_time_to_buy_and_sell_stock_with_cooldown/</guid>
      <description>[LeetCode] 309. Say you have an array for which the $i^{th}$element is the price of a given stock on day $i$.
Design an algorithm to find the maximum profit. You may complete as many transactions as you like(ie, buy one and sell one share of the stock multiple times) with the following restrictions:
 You may not engage in multiple transactions at the same time(ie, you must sell the stock before you buy again).</description>
    </item>
    
    <item>
      <title>字典树(前缀树) Trie Tree(Prefix Tree)</title>
      <link>http://blog.zhaoziwen.com.cn/post/trie_tree/</link>
      <pubDate>Thu, 28 Mar 2019 00:27:52 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/trie_tree/</guid>
      <description>字典树是一种数据结构，用于处理大量的字符串，是一种哈希树的变种。典型应用是用于统计、排序和保存大量的字符串，经常被搜索引擎系统用于文本词频统计。优点在于利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。
字典树有3个基本性质：
 根结点不包含字符，除根节点外每一个节点都只包含一个字符。 从根结点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。 每个节点的所有子节点包含的字符都不相同。  实现如下： 首先定义TrieNode
class TrieNode { char content; // the character in the node  boolean isEnd; // whether the end of the words  int count; //the number of words sharing this character  LinkedList&amp;lt;TrieNode&amp;gt; childList; // the child list  public TrieNode(char c) { childList = new LinkedList&amp;lt;TrieNode&amp;gt;(); isEnd = false; content = c; count = 0; } public TrieNode subNode(char c) { if(childList !</description>
    </item>
    
    <item>
      <title>Maximal Square</title>
      <link>http://blog.zhaoziwen.com.cn/post/maximal_square/</link>
      <pubDate>Wed, 27 Mar 2019 01:07:04 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/maximal_square/</guid>
      <description>[LeetCode] 221. Given a 2D binary matrix filled with 0&amp;rsquo;s and 1&amp;rsquo;s, find the largest square containing only 1&amp;rsquo;s and return its area.
Example:
Input:
1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0
Output: 4
 这又是一道典型的DP题目，但是我依然没有任何思路。
解决办法：
首先考虑第一行和第一列，如果为&amp;rsquo;1&amp;rsquo;，则该位置上的DP数组为1，否则为0。
然后再考虑中间，以中间某个点为右下角的最大的正方形即为上方、左方和左上方为右下角的最大正方形中的最小值加一。
即动态规划递推式为： $$ dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 $$
classSolution { public: int maximalSquare(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; matrix) { if (matrix.</description>
    </item>
    
    <item>
      <title>Course Schedule</title>
      <link>http://blog.zhaoziwen.com.cn/post/course_schedule/</link>
      <pubDate>Tue, 26 Mar 2019 00:32:46 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/course_schedule/</guid>
      <description>[LeetCode] 207. Course Schedule
There are a total of n courses you have to take, labeled from 0 to n-1.
Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]
Given the total number of courses and a list of prequisite pairs, is it possible for you to finish all courses?
Example 1:
Input: 2, [[1,0]] Output: true Explanation: There are a total of 2 courses to take.</description>
    </item>
    
    <item>
      <title>Ubuntu初始化配置流程</title>
      <link>http://blog.zhaoziwen.com.cn/post/ubuntu_start/</link>
      <pubDate>Mon, 25 Mar 2019 00:02:12 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/ubuntu_start/</guid>
      <description>以下记录一下Ubuntu的配置流程，持续更新
 环境：ubuntu 16.04.6 Desktop
 一、更新apt源 1、源文件备份
sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 2、编辑源列表文件
sudo vim /etc/apt/sources.list 3、将原来的列表删除，添加如下内容
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse # deb-src https://mirrors.</description>
    </item>
    
    <item>
      <title>Largest Rectangle in Histogram &amp; Maximal Rectangle</title>
      <link>http://blog.zhaoziwen.com.cn/post/lrih_and_mr/</link>
      <pubDate>Thu, 21 Mar 2019 01:08:23 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/lrih_and_mr/</guid>
      <description>这两题在LeetCode上位置临近，它们之间存在一定的关联
 [LeetCode] 84. Largest Rectangle in Histogram
Given n non-negaive integers representing the histogram&amp;rsquo;s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.
Above is a histogram where width of each bar is 1, given height = [2, 1, 5, 6, 2, 3].
The largest rectangle is shown in the shaded area, which has area = 10 unit.
Example:</description>
    </item>
    
    <item>
      <title>用户数据报协议UDP详解</title>
      <link>http://blog.zhaoziwen.com.cn/post/udp/</link>
      <pubDate>Wed, 20 Mar 2019 01:38:21 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/udp/</guid>
      <description> 概述 UDP只在IP数据报服务之上增加了复用、分用以及差错检测的功能。UDP的主要特点
 无连接。发送数据之前不需要建立连接，同时意味着减少了开销和发送前的时延。 尽最大努力交付，即不保证可靠交付。意味着主机不需要维持复杂的链接状态表。 面向报文。UDP对应用层下发的报文既不合并也不拆分，只添加首部后交给IP层。 没有拥塞控制。意味着网络出现的拥塞不会使主机发送频率降低。 UDP支持一对一、一对多、多对一和多对多的交互通信。 UPD首部开销小。只有8个字节，TCP首部20字节。  UDP的首部格式 UDP首部只有8个字节，由四个字段组成，每个字段两个字节。各字段意义如下：
 源端口。在需要对方回信时使用。不需要可用全0。 目的端口。在终点交付报文是必须使用。 长度。UDP用户数据报的长度，最小值为8（首部）。 检验和。检测UDP用户数据报在传输中是否有错。有错即丢弃。  当运输层从IP层收到UDP数据报时，就根据首部中的目的端口，把UDP数据报通过相应的端口，上交到最后的终点——应用程序。如果接收方UDP发现收到的报文中的目的端口号不正确，就丢弃该报文，并由网际控制报文ICMP发送“端口不可达”差错报文给发送方。虽然UDP需要使用到端口号，但由于UDP的通信是无连接的，因此不需要套接字。
UDP在计算检验和时，在UDP用户数据报之前增加12个字节的伪首部（并不是真正的首部，既不向下传送也不向上递交，仅仅用于计算检验和）
计算检验和步骤：
 把伪首部添加到UDP上； 计算初始是需要将检验和字段添零； 把所有位划分为16位（2字节）的字 把所有16位的字相加，如果遇到进位，则将高于16位的进位部分的值加到最低位上 将所有字相加得到的结果应该为一个16位的数，将该数取反则可以得到检验和  </description>
    </item>
    
    <item>
      <title>Unique Binary Search Trees</title>
      <link>http://blog.zhaoziwen.com.cn/post/unique_binary_search_trees/</link>
      <pubDate>Wed, 20 Mar 2019 00:54:11 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/unique_binary_search_trees/</guid>
      <description>[LeetCode] 96. Given n, how many structurally unique BST&amp;rsquo;s that store values 1 &amp;hellip; n ?
Example:
Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST&amp;rsquo;s:
 思路一递归：
空树和只有根结点时，也为BST。对于一点i，当其为根结点时，左子树的节点的个数为i-1（1, &amp;hellip; , i-1），右子树的个数为n-i（i+1, &amp;hellip; , n）。对于一个根来说，唯一二叉树的个数为左子树节点的个数乘以右子树的个数。
classSolution { public: int numTrees(int n) { if(n&amp;lt;=1) return 1; int sum=0; for(int i=1;i&amp;lt;=n;++i) sum+=numTrees(i-1)*numTrees(n-i); return sum; } };  思路二动态规划：
卡特兰数的递推公式：
$$C_{0} = 1 \ and \ C_{n+1} = \sum_{i=0}^{n}C_{i}C_{n-i} \ for \ n\geq 0.</description>
    </item>
    
    <item>
      <title>Word Search 之 DFS</title>
      <link>http://blog.zhaoziwen.com.cn/post/word_search/</link>
      <pubDate>Wed, 20 Mar 2019 00:36:42 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/word_search/</guid>
      <description>[LeetCode] 79. Word Search
Given a 2D board and a word, find if the word exists in the grid.
The word can be constructed from letters of sequentially adjacent cell, where &amp;ldquo;adjacent&amp;rdquo; cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.
Example:
board =
[
​ [&amp;lsquo;A&amp;rsquo;, &amp;lsquo;B&amp;rsquo;, &amp;lsquo;C&amp;rsquo;, &amp;lsquo;E&amp;rsquo;]
​ [&amp;rsquo;S&amp;rsquo;, &amp;lsquo;F&amp;rsquo;, &amp;lsquo;C&amp;rsquo;, &amp;rsquo;S&amp;rsquo;]
​ [&amp;lsquo;A&amp;rsquo;, &amp;rsquo;D&amp;rsquo;, &amp;lsquo;E&amp;rsquo;, &amp;lsquo;E&amp;rsquo;]</description>
    </item>
    
    <item>
      <title>Edit Distance 编辑距离</title>
      <link>http://blog.zhaoziwen.com.cn/post/edit_distance/</link>
      <pubDate>Tue, 19 Mar 2019 01:01:23 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/edit_distance/</guid>
      <description>[LeetCode] 72. Edit Distance
Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2
You have the following 3 operations permitted on a word:
 Insert a character Delete a character Replace a character  Example:
Input: word1 = &amp;ldquo;horse&amp;rdquo;, word2 = &amp;ldquo;ros&amp;rdquo;
Output: 3
Explanation:
horse -&amp;gt; rorse
rorse -&amp;gt; rose
rose -&amp;gt; ros
[Edit Distance]: https://leetcode.com/problems/edit-distance
 这道题一开始是能想到实用动态规划的，但是题目理解有点问题，所以没能推出DP的初始状态和状态转移方程。
思路：</description>
    </item>
    
    <item>
      <title>Longest_valid_parentheses</title>
      <link>http://blog.zhaoziwen.com.cn/post/longest_valid_parentheses/</link>
      <pubDate>Wed, 13 Mar 2019 23:58:12 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/longest_valid_parentheses/</guid>
      <description>[LeetCode] 32. Longest Valid Parentheses
Given a string containing just the characters &amp;lsquo;(&amp;rsquo; and &amp;lsquo;)&amp;rsquo;, find the length of the longest valid parentheses substring.
Example:
Input: &amp;ldquo;)()()&amp;rdquo;
Output: 4
 思路一：动态规划
dp[i]表示以当前位置为终点的最长长度，则只能在“)”处更新：
如果s[i-1-dp[i-1]]==&amp;lsquo;(&amp;lsquo;，则说明当前位置可以和i-1-dp[i-1]位置匹配，dp[i] = dp[i-1]+2；
然后还要加上匹配位置之前的最长长度dp[i]+=dp[i-dp[i]]；
classSolution { public: int longestValidParentheses(string s) { int result = 0; s = &amp;#39;)&amp;#39; + s; vector&amp;lt;int&amp;gt; dp(s.length(),0); for(int i = 1; i &amp;lt; s.length(); i++) { if(s[i] == &amp;#39;)&amp;#39;) { if(s[i - 1 - dp[i - 1]] == &amp;#39;(&amp;#39;) dp[i] = dp[i-1] + 2; dp[i] += dp[i-dp[i]]; } result = max(result,dp[i]); } return result; } };  思路二：栈</description>
    </item>
    
    <item>
      <title>递归之生成括号</title>
      <link>http://blog.zhaoziwen.com.cn/post/generate_parentheses/</link>
      <pubDate>Tue, 12 Mar 2019 23:48:48 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/generate_parentheses/</guid>
      <description>[LeetCode] 22. Generate Parentheses
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
For example, given n = 3, a solution set is:
[
​ &amp;ldquo;((()))&amp;rdquo;
​ &amp;ldquo;(()())&amp;rdquo;
​ &amp;ldquo;()(())&amp;rdquo;
​ &amp;ldquo;()()()&amp;rdquo;
]
 和合法的情况下，任意时刻，左括号个数要大于等于右括号个数
1、当left个数大于right个数，非常情况，返回即可
2、left和right都等于0，临时变量中左右括号个数相等，所以将临时变量的值存入res中
3、其余情况下，先放左括号，再放右括号，然后递归。
classSolution { public: vector&amp;lt;string&amp;gt; generateParenthesis(int n) { vector&amp;lt;string&amp;gt; res; generateParenthesisDFS(n, n, &amp;#34;&amp;#34;, res); return res; } void generateParenthesisDFS(int left, int right, string out, vector&amp;lt;string&amp;gt; &amp;amp;res) { if(left &amp;gt; right) return; if(left == 0 &amp;amp;&amp;amp; right == 0) res.</description>
    </item>
    
    <item>
      <title>Median_of_two_sorted_arrays</title>
      <link>http://blog.zhaoziwen.com.cn/post/median_of_two_sorted_arrays/</link>
      <pubDate>Mon, 11 Mar 2019 21:51:00 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/median_of_two_sorted_arrays/</guid>
      <description>Median of two sorted arrays 核心是将原问题转变成寻找第k小数的问题（假设两个原序列升序排列）
首先假设数组A和B的元素个数都大于k/2，比较A[k/2-1]和B[k/2-1]两个元素，这两个元素分别表示A的第k/2小的元素和B的第k/2小的元素。
1、A[k/2-1]&amp;lt;B[k/2-1]，表示A[0]到A[k/2-1]的元素都在A和B合并之后的前k小的元素中，所以我们抛弃它。
2、A[k/2-1]&amp;gt;B[k/2-1]，同上
3、A[k/2-1]=B[k/2-1]，这个数即第K小的数
 [LeetCode] 4. Median of Two Sorted Arrays
There are two sorted arrays nums1 and nums2 of size m and n respectively.
Find the median of the two sorted arrays. The overall run time complexity should be O(log(m+n)).
Example:
nums1 = [1, 3]
nums2 = [2]
The midian is 2.0
 classSolution { public: double findMedianSortedArrays(vector&amp;lt;int&amp;gt;&amp;amp; nums1, vector&amp;lt;int&amp;gt;&amp;amp; nums2) { int m = nums1.</description>
    </item>
    
    <item>
      <title>String_rotate</title>
      <link>http://blog.zhaoziwen.com.cn/post/string_rotate/</link>
      <pubDate>Sun, 10 Mar 2019 15:39:15 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/string_rotate/</guid>
      <description>字符串翻转与旋转 翻转 除了常规思路的左右位置对调，至此提供一种新的思路，用以解决其他特定环境下的相关问题。
利用迭代的思路对需要处理的字符串两边整体对换直到只有一位，如对于一个8位数字abcdefgh来讲，处理过程如下：
abcdefgh -&amp;gt; efghabcd -&amp;gt; ghefcdab -&amp;gt; hgfedcba
例如：
 [LeetCode] 190. Reverse Bits
Reverse bits of a given 32 bits unsigned integer.
Example :
Input: 00000010100101000001111010011100
Output: 00111001011110000010100101000000
 常规思路：
classSolution { public: uint32_t res = 0; for (int i = 0; i &amp;lt; 32; i++) { res |= (((n &amp;gt;&amp;gt; i) &amp;amp; 1) &amp;lt;&amp;lt; (32 - i)); } return res; }  本文思路：
classSolution { public: uint32_t reverseBits(uint32_t n) { n = (n &amp;gt;&amp;gt; 16) | (n &amp;lt;&amp;lt; 16); n = ((n &amp;amp; 0xff00ff00) &amp;gt;&amp;gt; 8) | ((n &amp;amp; 0x00ff00ff) &amp;lt;&amp;lt; 8); n = ((n &amp;amp; 0xf0f0f0f0) &amp;gt;&amp;gt; 4) | ((n &amp;amp; 0x0f0f0f0f) &amp;lt;&amp;lt; 4); n = ((n &amp;amp; 0xcccccccc) &amp;gt;&amp;gt; 2) | ((n &amp;amp; 0x33333333) &amp;lt;&amp;lt; 2); n = ((n &amp;amp; 0xaaaaaaaa) &amp;gt;&amp;gt; 1) | ((n &amp;amp; 0x55555555) &amp;lt;&amp;lt; 1); return n; } };  旋转 类似翻转字符串的方法，思路是先把前n-k个字符翻转一下，再把后k个字符翻转一下，最后再把整个数组翻转一下</description>
    </item>
    
    <item>
      <title>搭建hugo博客</title>
      <link>http://blog.zhaoziwen.com.cn/post/new_hugo_blog/</link>
      <pubDate>Thu, 07 Mar 2019 18:58:07 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/new_hugo_blog/</guid>
      <description>在很久之前就想拥有一个自己的博客，尝试过wordpress，不过可惜没找到一个喜欢的theme，并且由于wordpress不能原生支持markdown。遂放弃，后来又听说了hugo、hexo之类的静态网页不过。刚开始被复杂的生成流程吓尿，所有现在记录一下博客的搭建过程。
本地开发环境 下面将以macOS为例.
本地安装hugo $ brew install hugo $ hugo version # 检查是否安装成功 $ cd ~/Sites $ hugo new site my-blog $ cd my-blog 安装主题 $ cd themes $ git clone https://github.com/laozhu/hugo-nuo 根据需要替换主题目录下static/img里面的图片
配置 参考exampleSite里面的config.toml修改配置文件
baseURL = &amp;#34;http://blog.zhaoziwen.com.cn&amp;#34; languageCode = &amp;#34;en-us&amp;#34; title = &amp;#34;z2w_mose&amp;#34; theme = &amp;#34;hugo-nuo&amp;#34; copyright = &amp;#34;© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://blog.zhaoziwen.com.cn/post/welcome/</link>
      <pubDate>Wed, 06 Mar 2019 12:36:04 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/welcome/</guid>
      <description>Welcome!</description>
    </item>
    
  </channel>
</rss>