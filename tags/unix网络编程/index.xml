<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unix网络编程 on z2w_mose</title>
    <link>http://blog.zhaoziwen.com.cn/tags/unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in Unix网络编程 on z2w_mose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Fri, 19 Apr 2019 00:17:25 +0800</lastBuildDate>
    
	<atom:link href="http://blog.zhaoziwen.com.cn/tags/unix%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>POSIX信号</title>
      <link>http://blog.zhaoziwen.com.cn/post/posix_signal/</link>
      <pubDate>Fri, 19 Apr 2019 00:17:25 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/posix_signal/</guid>
      <description>在服务器子进程终止时，给父进程发送一个SIGCHLD信号。由于父进程未加处理，子进程进入僵死状态。
POSIX信号处理 信号就是告知某个进程发生了某个事件的通知，有时也成为软件中断(interrupt)
信号可以：
 由一个进程发送给另一个进程 由内核发送给某个进程  每一个信号都有一个与之关联的处置(disposition)，也称为行为(action)。我们通过调用sigaction函数来设定一个信号的处置，并有三种选择：
 提供一个函数，在特定信号发生时就被调用。这样的函数被称为信号处理函数，这种行为称为捕获信号。但是有两个信号不同被捕获，即SIGKILL和SIGSTOP。 可以把某个信号的处置设定为SIG_IGN来忽略它。SIGKILL和SIGSTOP这两个信号不能被忽略。 把某个信号的处置设定为SIG_DFL来启用它的默认处置。  signal函数 简历信号处置的POSIX方法就是调用sigaction函数，简单些的方法就是调用signal函数
/* include signal */ #include	&amp;#34;unp.h&amp;#34; Sigfunc * signal(int signo, Sigfunc *func) { struct sigaction	act, oact; act.sa_handler = func; sigemptyset(&amp;amp;act.sa_mask); act.sa_flags = 0; if (signo == SIGALRM) { #ifdef	SA_INTERRUPT 	act.sa_flags |= SA_INTERRUPT;	/* SunOS 4.x */ #endif 	} else { #ifdef	SA_RESTART 	act.sa_flags |= SA_RESTART;	/* SVR4, 44BSD */ #endif 	} if (sigaction(signo, &amp;amp;act, &amp;amp;oact) &amp;lt; 0) return(SIG_ERR); return(oact.</description>
    </item>
    
    <item>
      <title>基本TCP套接字编程</title>
      <link>http://blog.zhaoziwen.com.cn/post/basic_tcp_socket_code/</link>
      <pubDate>Sat, 13 Apr 2019 19:51:39 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/basic_tcp_socket_code/</guid>
      <description>基础源码(请求日期和时间) 客户端 #include	&amp;#34;unp.h&amp;#34; int main(int argc, char **argv) { int	sockfd, n; char	recvline[MAXLINE + 1]; struct sockaddr_in	servaddr; if (argc != 2) err_quit(&amp;#34;usage: a.out &amp;lt;IPaddress&amp;gt;&amp;#34;); if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) &amp;lt; 0) err_sys(&amp;#34;socket error&amp;#34;); bzero(&amp;amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(13);	/* daytime server */ if (inet_pton(AF_INET, argv[1], &amp;amp;servaddr.sin_addr) &amp;lt;= 0) err_quit(&amp;#34;inet_pton error for %s&amp;#34;, argv[1]); if (connect(sockfd, (SA *) &amp;amp;servaddr, sizeof(servaddr)) &amp;lt; 0) err_sys(&amp;#34;connect error&amp;#34;); while ( (n = read(sockfd, recvline, MAXLINE)) &amp;gt; 0) { recvline[n] = 0;	/* null terminate */ if (fputs(recvline, stdout) == EOF) err_sys(&amp;#34;fputs error&amp;#34;); } if (n &amp;lt; 0) err_sys(&amp;#34;read error&amp;#34;); exit(0); } 服务端 #include	&amp;#34;unp.</description>
    </item>
    
  </channel>
</rss>