<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on z2w_mose</title>
    <link>http://blog.zhaoziwen.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on z2w_mose</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sun, 26 May 2019 22:23:57 +0800</lastBuildDate>
    
	<atom:link href="http://blog.zhaoziwen.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>堆及相关操作</title>
      <link>http://blog.zhaoziwen.com.cn/post/heap/</link>
      <pubDate>Sun, 26 May 2019 22:23:57 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/heap/</guid>
      <description>列举一些堆及相关操作的代码
相关数据结构
struct TreeNode { int Weight = 0; TreeNode *Left = nullptr; TreeNode *Right = nullptr; } struct HeapNode { TreeNode Data[MaxNum]; int size = 0; }  创建一个小根堆
HeapNode *CreateHeap(int N) { HeapNode *H = new(HeapNode); H-&amp;gt;Data[0].Weight = -1; //第一个作为哨兵，从1开始计数  return H; }  从堆中删除一个结点
TreeNode *DeleteMin(HeapNode *H) { int Parent = 0, Child = 0; TreeNode temp; TreeNode *MinItem = new(TreeNode); *MinItem = H-&amp;gt;Data[1]; temp = (H-&amp;gt;Data[(H-&amp;gt;Size)--]); for(Parent = 1; Parent * 2 &amp;lt;= H-&amp;gt;Size; Parent = Child) { Child = Parent * 2; if((Child !</description>
    </item>
    
    <item>
      <title>字典树(前缀树) Trie Tree(Prefix Tree)</title>
      <link>http://blog.zhaoziwen.com.cn/post/trie_tree/</link>
      <pubDate>Thu, 28 Mar 2019 00:27:52 +0800</pubDate>
      
      <guid>http://blog.zhaoziwen.com.cn/post/trie_tree/</guid>
      <description>字典树是一种数据结构，用于处理大量的字符串，是一种哈希树的变种。典型应用是用于统计、排序和保存大量的字符串，经常被搜索引擎系统用于文本词频统计。优点在于利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。
字典树有3个基本性质：
 根结点不包含字符，除根节点外每一个节点都只包含一个字符。 从根结点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。 每个节点的所有子节点包含的字符都不相同。  实现如下： 首先定义TrieNode
class TrieNode { char content; // the character in the node  boolean isEnd; // whether the end of the words  int count; //the number of words sharing this character  LinkedList&amp;lt;TrieNode&amp;gt; childList; // the child list  public TrieNode(char c) { childList = new LinkedList&amp;lt;TrieNode&amp;gt;(); isEnd = false; content = c; count = 0; } public TrieNode subNode(char c) { if(childList !</description>
    </item>
    
  </channel>
</rss>